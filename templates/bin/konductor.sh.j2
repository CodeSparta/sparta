#!/bin/bash
# Konductor.sh
#   Authors: kmorgan@redhat.com, kritchie@redhat.com
#   Author: kmorgan@redhat.com
# About:
#   Build and start CloudCtl AirGap OpenShift Deployment Pod from a Koffer Bundle
################################################################################
export k9DirCluster="/root/platform/cluster"

################################################################################
# Base Logging
run_log () {
  if   [[ $1 == 0 ]]; then
    echo "   $2"
  elif [[ $1 == 1 ]]; then
    echo "   FATAL: $2"
    echo "Aborting!"
    exit 1
  fi
}

################################################################################
# Verify Bundle Integrity & Launch
if [[ ! -f /root/platform/nginx/release.txt ]]; then
  run_log 0 "Verifying SHA256SUM: ArtifactsBundle.tar.xz"

  sha256sum --check ArtifactsBundle.tar.xz.sha256 \
    || run_log 1 "SHA Verify Failed!"

  tar -xv -C /root -f /root/ArtifactsBundle.tar.xz && rm -rf ArtifactsBundle.tar.xz ArtifactsBundle.tar.xz.sha256
fi

################################################################################
# Konductor Initialization & Prerequisites
################################################################################
# Working Variables
k9DirDeploy="${HOME}/platform"
varVerOpenshift="$(cat /root/platform/nginx/release.txt)"

################################################################################
# Stage ansible variables
run_stage_deploy_variables () {
echo && run_log 0 "Staging Ansible ${k9DirDeploy}/iac/cluster-vars.yml variables file"
source /root/answer.sh
export k9ClusterDomain="${k9NameCluster}.${k9NameDomain}"

cat <<EOF | tee ${k9DirDeploy}/iac/cluster-vars.yml
---
vpc_id: "${k9VpcId}"
vpc_name: "${k9NameVpc}"
rhcos_ami: "${k9RhcosAmi}"
aws_region: "${k9AwsRegion}"
name_domain: "${k9NameDomain}"
cluster_name: "${k9NameCluster}"
private_vpc_cidr: "${k9VpcCidr}"
cluster_name: "${k9NameCluster}"
name_cluster_vpc: "${k9NameVpc}"
cluster_domain: "${k9NameCluster}.${k9NameDomain}"
aws_access_key_id: "${k9AwsKeyId}"
cluster_domain: "${k9ClusterDomain}"
version_openshift: "${varVerOpenshift}"
aws_secret_access_key: "${k9AwsKeySecret}"
target_environment: "${k9TargetEnvironment}"
subnet_list: ${k9SubnetList}
EOF
}

write_aws_keys () {
cat <<EOF | tee ${k9DirDeploy}/release.txt
${varVerOpenshift}
EOF
echo
}

################################################################################
# One Time Artifact Environment Staging
run_init_stage () {
# Stage environment variables
mkdir -p ${k9DirDeploy}/config
cat <<EOF > ${k9DirDeploy}/config/environment
export k9DirDeploy="\${HOME}/platform"
export versOCP="${varVerOpenshift}"
export k9NameVpc="${k9NameVpc}"
export k9NameDomain="${k9NameDomain}"
export k9NameCluster="${k9NameCluster}"
export k9ClusterDomain="${k9NameCluster}.${k9NameDomain}"
export k9DirCluster="${k9DirCluster}"
export k9VpcId="${k9VpcId}"
export k9VpcCidr="${k9VpcCidr}"
export k9RhcosAmi="${k9RhcosAmi}"
export k9SubnetList=[${k9SubnetList}]
EOF
}

# Post run of ENVIRONMENT file population to capture changes from answer.sh file
run_init_post () {
mkdir -p ${k9DirDeploy}/config
cat <<EOF > ${k9DirDeploy}/config/environment
export k9DirDeploy="\${HOME}/platform"
export versOCP="${varVerOpenshift}"
export k9NameVpc="${k9NameVpc}"
export k9NameDomain="${k9NameDomain}"
export k9NameCluster="${k9NameCluster}"
export k9ClusterDomain="${k9NameCluster}.${k9NameDomain}"
export k9DirCluster="${k9DirCluster}"
export k9VpcId="${k9VpcId}"
export k9VpcCidr="${private_vpc_cird}"
export k9RhcosAmi="${k9RhcosAmi}"
export k9SubnetList=[${k9SubnetList}]
EOF
}

################################################################################
# Write Self Signed Certificate & Key
run_log 0 "Staging optional registry node self signed certificates"
write_self_signed_cert () {
openssl req \
  -x509 \
  -nodes \
  -sha256 \
  -days   3650 \
  -newkey rsa:4096 \
  -subj   "/CN=${k9ClusterDomain}" \
  -out    /root/platform/secrets/registry/ssl/registry.crt  \
  -keyout /root/platform/secrets/registry/ssl/registry.key  \
  -addext "subjectAltName=DNS:registry.${k9NameCluster}.${k9NameDomain},DNS:cloudctl,DNS:registry,DNS:localhost,IP:10.88.0.1,IP:127.0.0.1" 2>&1 1>/dev/null
}

################################################################################
# Prompt user for aws keys
usr_prompt_aws_keys () {
  clear && echo
  run_log 0 "AWS GovCloud IAM Credentials Web Panel:" ;
  run_log 0 "  https://console.amazonaws-us-gov.com/iam/home#/security_credentials" ;
  echo
  run_log 0 "Click on 'Create access key'"
  # Prompt user to paste secret
  echo
  read  -rp "    >> Please copy/paste your AWS 'Access Key ID': " access_KEYID;
  read  -rp "    >> Please enter your AWS 'Region': " k9AwsRegion;
  read -srp "    >> Please copy/paste your AWS 'Secret Access Key' (Secret is masked): " k9AwsKeySecret;

mkdir -p ${k9DirDeploy}/secrets/aws
cat <<EOF > ${k9DirDeploy}/secrets/aws/credentials
; https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html
[default]
region = ${k9AwsRegion}
aws_access_key_id = ${k9AwsKeyId}
aws_secret_access_key = ${k9AwsKeySecret}
EOF
}

################################################################################
# One Time Artifact Environment Staging
run_init_usr_prompt () {
  # Verify Information
  prompt_verify () {
    echo " 
    Artifact Environment Variables:
      TARGET_ENVIRONMENT: ${k9TargetEnvironment}
      VPC_NAME:           ${k9NameVpc}
      CLUSTER_DOMAIN:     ${k9ClusterDomain}
      CLUSTER_NAME:       ${k9NameCluster}
      BASE_DOMAIN:        ${k9NameDomain}
      VPC_ID:             ${k9VpcId}
      PRIVATE_VPC_CIDR:   ${k9VpcCidr}
      RHCOS_AMI:          ${k9RhcosAmi}
      SUBNET_LIST:        ${k9SubnetList}
"

  while true; do
    read -p "    Please confirm these details are correct (Yes/No): " verify
    case ${verify} in
      [Yy]* ) run_log 0 "User Confirmed. Continuing ..." ;
	      break
	      ;;
      [Nn]* ) run_log 1 "User Rejected.  Terminating ..." ;;
          * ) run_log 3 "Please answer Yes or No"         ;;
    esac
  done
  }

  # Prompt user for AWS VPC Name
  prompt_k9NameVpc () {
    read -p '
    Please enter your AWS VPC name: ' k9NameVpc
  }

  # Prompt user for AWS VPC_ID
  prompt_k9VpcId () {
    read -p '
    Please enter your AWS VPC_ID: ' k9VpcId
  }

  # Prompt user for AWS PRIVATE_VPC_CIDR
  prompt_k9VpcCidr () {
    read -p '
    Please enter your AWS PRIVATE_VPC_CIDR (ex: 10.0.0.0/24): ' k9VpcCidr
  }

  # Prompt user for AWS RHCOS_AMI
  prompt_k9RhcosAmi () {
    read -p '
    Please enter your AWS RHCOS_AMI: ' k9RhcosAmi
  }

  # Prompt user for AWS SUBNET_LIST
  prompt_k9SubnetList () {
    read -p '
    Please enter your AWS SUBNET_LIST (csv ex: subnet-a, subnet-b): ' k9SubnetList
  }

  # Prompt user for AWS Cluster Name
  prompt_k9NameCluster () {
  echo "
    Please enter a cluster name which will be prepended to the Base Domain
    This is a unique and arbitrary name which will be appended as a subdomain.
      Example entry:
        cluster
      Which would prepend to become:
        cluster.cloud.com
        cluster.anchovy.dev"
  read -p '    Cluster Name: ' k9NameCluster
  k9ClusterDomain="${k9NameCluster}.${k9NameDomain}"
  k9DirCluster="${k9DirDeploy}/cluster"
  }

  # Prompt user for Base Domain Name
  prompt_k9NameDomain () {
  echo "
    Please enter a base domain name for this environment
    This may be an arbitrary local only domain, or a domain you own the rights to.
      Example:
      Example:             
        cloud.com
        anchovy.dev"
  read -p '    Base Domain : ' k9NameDomain ;
  }

  # Prompt User for Target Environment
  prompt_k9TargetEnvironment () {
  echo "
    Please Declare your target environment from the supported list:
    Supported Environments:
      - fences
      - govcloud
"
  read -p '    Target Environment: ' k9TargetEnvironment;
  }

  # Call subroutines
  sub_run () {
    clear && echo
    prompt_k9TargetEnvironment
    prompt_k9NameDomain
    prompt_k9NameCluster
    prompt_k9NameVpc
    prompt_k9VpcId
    prompt_k9VpcCidr
    prompt_k9SubnetList
    prompt_k9RhcosAmi
    prompt_verify
  }
sub_run
}

################################################################################
# User Introduction
run_info () {
clear
run_log 0 "
    Welcome to the ContainerOne OpenShift Artifact Prep Utility.
    This will walk you through your OpenShift on AWS prerequisites:

    External Requirements:

      AWS Admin Credentials:
          GovCloud Credentials:
            @ https://console.amazonaws-us-gov.com/iam/home#/security_credentials
"
  while true; do
    read -p "    Are you ready to continue? (Yes/No): " verify
    case ${verify} in
      [Yy]* ) run_log 0 "Continuing ..." ;
	      break ;;
      [Nn]* ) run_log 1 "User Rejected.  Terminating ..." ;;
          * ) run_log 3 "Please answer Yes or No"         ;;
    esac
  done
}

################################################################################
# One Time Artifact Env Staging to Populate 'answer.sh'
################################################################################

run_init_answer () {
cat <<EOF > /root/answer.sh
export versOCP="${varVerOpenshift}"
export varVerOpenshift="${varVerOpenshift}"
export k9VpcId="${k9VpcId}"
export k9NameVpc="${k9NameVpc}"
export k9VpcCidr="${k9VpcCidr}"
export k9RhcosAmi="${k9RhcosAmi}"
export k9AwsKeyId="${k9AwsKeyId}"
export k9DirDeploy="\${HOME}/platform"
export k9AwsRegion="${k9AwsRegion}"
export k9NameDomain="${k9NameDomain}"
export k9SubnetList=[${k9SubnetList}]
export k9DirCluster="${k9DirCluster}"
export k9NameCluster="${k9NameCluster}"
export k9AwsKeySecret="${k9AwsKeySecret}"
export k9ClusterDomain="${k9NameCluster}.${k9NameDomain}"
export k9TargetEnvironment="${k9TargetEnvironment}"
EOF
}

## In Case the values have changed in the answer.sh, rewrite the values for the aws keys

write_aws_keys () {
mkdir -p ${k9DirDeploy}/secrets/aws
cat <<EOF > ${k9DirDeploy}/secrets/aws/credentials
; https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html
[default]
aws_region = ${k9AwsRegion}
aws_access_key_id = ${k9AwsKeyId}
aws_secret_access_key = ${k9AwsKeySecret}
EOF
}

################################################################################
# One Time Artifact Env Staging to Populate 'global.tfvars'
################################################################################

write_global_tf_vars () {
cat <<EOF > ${k9DirDeploy}/iac/global.tfvars
vpc_id="${k9VpcId}"
vpc_name="${k9NameVpc}"
rhcos_ami="${k9RhcosAmi}"
aws_region="${k9AwsRegion}"
subnet_list=${k9SubnetList}
name_domain="${k9NameDomain}"
cluster_name="${k9NameCluster}"
cluster_domain="${k9NameCluster}.${k9NameDomain}"
private_vpc_cidr="${k9VpcCidr}"
aws_access_key_id="${k9AwsKeyId}"
target_environment="${k9TargetEnvironment}"
aws_secret_access_key="${k9AwsKeySecret}"
EOF
}
################################################################################
# Post Artifact Env Staging to Populate 'global.tfvars' from 'answer.sh' vars
################################################################################

write_global_tf_vars_post () {
cat <<EOF > ${k9DirDeploy}/iac/global.tfvars
vpc_id="${k9VpcId}"
vpc_name="${k9NameVpc}"
rhcos_ami="${k9RhcosAmi}"
aws_region="${k9AwsRegion}"
subnet_list=${k9SubnetList}
name_domain="${k9NameDomain}"
cluster_name="${k9NameCluster}"
cluster_domain="${k9NameCluster}.${k9NameDomain}"
private_vpc_cidr="${k9VpcCidr}"
aws_access_key_id="${k9AwsKeyId}"
target_environment="${k9TargetEnvironment}"
aws_secret_access_key="${k9AwsKeySecret}"
EOF
}
################################################################################
# Function Call Sequence 
################################################################################

run_discover () {
  run_info
  run_init_usr_prompt
  run_init_stage
  usr_prompt_aws_keys 
  write_self_signed_cert 
  run_stage_deploy_variables
  run_init_answer
  write_global_tf_vars
  exit
}

if [ ! -f /root/answer.sh ]; then
    run_discover
else 
    source /root/answer.sh
    run_init_post
    write_global_tf_vars_post
    write_aws_keys
    write_self_signed_cert
    run_stage_deploy_variables
fi


################################################################################
# CloudCtl Pod Startup
################################################################################

runUser="$USER"
p1DirImages=${HOME}/platform/images

sudo chown -R ${runUser}:${runUser} ${HOME}/platform
sudo mkdir -p /root/platform/nginx
sudo chmod -R 0777 ${HOME}/platform/nginx

########################################################################################
# Option Run Ansible Playbook (no longer prompt user; cluster will deploy without input)
########################################################################################

run_ansible_playbook_bundle () {
  echo;
  run_log 0 "Restarting Nginx & Registry containers"; 
  podman restart nginx
  podman restart registry
  echo;
  run_log 0 "Executing ansible playbook ${runAnsibleCmd}"; 
  clear;
 #podman exec -it konductor /bin/bash -c 'cd /root/platform/iac/deploy ; ./site.yml';
  # Exec golang entrypoint to run deploy/site.yml
  podman exec -it konductor konductor deploy
}


run_clean () {
  for container in $(podman ps | awk '/konductor|konductor|nginx|registry|pause|busybox/{print $3}' 2>/dev/null); do
    podman rm --force $container 2>/dev/null
  done
  for pod in $(podman pod ps | awk '/cloudctl/{print $1}' 2>/dev/null); do
    podman pod rm --force $pod 2>/dev/null
  done
  for image in $(podman images | awk '/konductor|konductor|nginx|registry|pause|busybox/{print $3}' 2>/dev/null); do
    podman rmi --force $image 2>/dev/null
  done
}

load_images () {
  for image in $(ls ${p1DirImages}/*.tar); do
    echo "  >> Loading Image: ${image}"
    sudo podman load -i ${image}
  done
  echo "  >> Cloudctl Images Loaded Successfully."
}

load_mirror_certificate () {
 echo "  >> Loading registry certificate on host."
mkdir -p /root/platform/secrets/registry/ssl 2>/dev/null \
cp /root/platform/secrets/registry/ssl/registry.crt \
    /etc/pki/ca-trust/source/anchors/registry.crt 2>/dev/null \
  && sudo update-ca-trust 1>&2 2>/dev/null
}

run_pod () {
  echo "  >> Starting CloudCtl Pod."
  podman play kube ./cloudctl.yml
}

run_core () {
  run_clean
  load_images
  load_mirror_certificate
  run_pod
}

test_core () {
  
  echo "  >> Testing NGINX Ignition Service"
  ignTest=$(curl -s http://localhost:8080/release.txt 2>&1 1>/dev/null ; echo $?)
  [[ ! ${ignTest} == '0' ]] \
      && echo "  >> NGINX Ignition Delivery Service Failed!" \
      || echo "  >> NGINX Ignition Delivery Service Online."

  echo "  >> Testing Docker Registry:2 Service"
  sleep 3
  ignTest=$(curl -u cloudctl:cloudctl -k https://localhost:5000/v2/_catalog 2>&1 1>/dev/null ; echo $?)
  [[ ${ignTest} == '0' ]] \
      && echo "  >> Registry Service Failed!" \
      || echo "  >> Registry Service Online. Catalog: $(curl -s -u cloudctl:cloudctl -k https://localhost:5000/v2/_catalog)"
  echo
  echo "  >> List Pods & Containers"
  podman pod ps
  podman ps --all
  echo
}

run () {
run_core
test_core
run_ansible_playbook_bundle
sleep 1
podman restart nginx
podman restart registry
}
run
